plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
    id "io.freefair.lombok" version '6.0.0-m2'
}

repositories {
    mavenCentral()
}

allure {
    report {
        version.set("2.32.0") //версия Allure Report (https://github.com/allure-framework/allure2)
    }
    adapter {
        aspectjWeaver.set(true) // обработка аннотации @Step
        frameworks {
            junit5 {
                adapterVersion.set("2.29.1") //версия Allure JUnit5 (https://github.com/allure-framework/allure-java)
            }
        }
    }
}

dependencies {
    testImplementation(
        "com.codeborne:selenide:7.0.0",
        "org.junit.jupiter:junit-jupiter:5.10.0",
        'org.slf4j:slf4j-simple:2.0.7',
        'io.qameta.allure:allure-selenide:2.27.0',
        "io.rest-assured:rest-assured:5.4.0",
            "io.qameta.allure:allure-rest-assured:2.27.0",
        "io.rest-assured:json-schema-validator:5.4.0",
            'com.github.javafaker:javafaker:1.0.2',
        "org.assertj:assertj-core:3.26.0"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test){
    systemProperties(System.getProperties())
    useJUnitPlatform()
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
task reqres_in_tests(type:Test){
    useJUnitPlatform(){
        includeTags("reqres_in_tests")
    }
}

task book_store_tests(type:Test){
    useJUnitPlatform(){
        includeTags("book_store_tests")
    }
}

test {
    useJUnitPlatform {
        if (project.hasProperty("includeTags")) {
            includeTags(project.property("includeTags") as String)
        }
    }
}